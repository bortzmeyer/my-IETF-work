<?xml version="1.0" encoding="US-ASCII"?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY rfc1034 SYSTEM "reference.RFC.1034.xml">
<!ENTITY rfc1035 SYSTEM "reference.RFC.1035.xml">
<!ENTITY rfc2119 SYSTEM "reference.RFC.2119.xml">
<!ENTITY rfc2181 SYSTEM "reference.RFC.2181.xml">
<!ENTITY rfc4033 SYSTEM "reference.RFC.4033.xml">
<!ENTITY rfc5246 SYSTEM "reference.RFC.5246.xml">
<!ENTITY rfc5936 SYSTEM "reference.RFC.5936.xml">
<!ENTITY rfc6347 SYSTEM "reference.RFC.6347.xml">
<!ENTITY rfc6973 SYSTEM "reference.RFC.6973.xml">
<!ENTITY rfc6982 SYSTEM "reference.RFC.6982.xml">
<!ENTITY rfc7626 SYSTEM "reference.RFC.7626.xml">
<!ENTITY rfc7816 SYSTEM "reference.RFC.7816.xml">
]>

<rfc docName="draft-bortzmeyer-rfc7816bis-00-BETA"
  category="std" ipr="trust200902" obsoletes="7816">

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>

<front>
<title abbrev="QNAME Minimisation">DNS Query Name Minimisation to Improve Privacy</title>

<author fullname="Stephane Bortzmeyer" initials="S." surname="Bortzmeyer">
<organization>AFNIC</organization>
<address>
<postal>
<street>1, rue Stephenson</street>
<code>78180</code>
<city>Montigny-le-Bretonneux</city>
<country>France</country>
</postal>
<phone>+33 1 39 30 83 46</phone>
<email>bortzmeyer+ietf@nic.fr</email>
<uri>http://www.afnic.fr/</uri>
</address>
</author>

<date month="TODO" year="TODO"/>

<abstract>
<t>This document describes a technique to improve DNS privacy, a technique
called "QNAME minimisation", where the DNS resolver no longer sends the full
original QNAME to the upstream name server.</t>
<t>RFC-EDITOR: REMOVE BEFORE PUBLICATION. The original <xref
target="RFC7816"/> had the experimental status. This document is
intended for the standards track. should be discussed in the
IETF DNSOP (DNS Operations) group, through its mailing list. The
source of the document, as well as a list of open issues, is currently
kept <eref
target="https://github.com/bortzmeyer/my-IETF-work/tree/master/qname-minimisation-bis-stds">at
Github</eref>.</t>
</abstract>
</front>

<middle>
<section anchor="intro" title="Introduction and Background">
<t>The problem statement is described in <xref
target="RFC7626"/>. The terminology ("QNAME", "resolver", etc.) is also
defined in this companion document. This specific solution is not
intended to fully solve the&nbsp;DNS privacy problem; instead, it
should be viewed as one tool amongst many.</t>

<t>QNAME minimisation follows the principle explained in
Section&nbsp;6.1 of <xref target="RFC6973"/>: the less data you send out,
the fewer privacy problems you&nbsp;have.</t>
<t>Currently, when a resolver receives the query "What is
the AAAA record for www.example.com?", it sends to the root (assuming
a cold resolver, whose cache is empty) the very same question. Sending
the full QNAME to the authoritative name&nbsp;server is a tradition,
not a protocol requirement. In a conversation with the author in
January&nbsp;2015, Paul Mockapetris explained that this tradition comes
from a desire to optimise the number of requests, when the same
name&nbsp;server is authoritative for many zones in a given name
(something that was more common in the old days, where the same
name&nbsp;servers served .com and the root) or when the same
name&nbsp;server is both recursive and authoritative (something that is
strongly discouraged now). Whatever the merits of this choice at this
time, the DNS is quite different now.</t>
</section>

<section anchor="qname-main" title="QNAME Minimisation">
<t>The idea is to minimise the amount of data sent from the DNS
resolver to the authoritative name&nbsp;server. In the example in the
previous section, sending "What are the NS records for .com?" would
have been sufficient (since it will be the answer from the root
anyway). The rest of this section describes the recommended way to do
QNAME minimisation -- the way that maximises privacy benefits (other
alternatives are discussed in the appendices).</t>

<t>Instead of sending the full QNAME and the original QTYPE upstream,
a resolver that implements QNAME minimisation and does not already
have the answer in its cache sends a request to the name&nbsp;server
authoritative for the closest known ancestor of the original QNAME.

The request is done with:

<list style="symbols">
<t>the QTYPE NS</t>
<t>the QNAME that is the original QNAME, stripped to just one label
more than the zone for which the server is authoritative</t>
</list>
For example, a resolver receives a request to resolve
foo.bar.baz.example. Let's assume that it already knows that
ns1.nic.example is authoritative for .example and the resolver does
not know a more specific authoritative name&nbsp;server. It will send the
query QTYPE=NS,QNAME=baz.example to ns1.nic.example.</t>
<t>The minimising resolver works perfectly when it knows the zone cut
(zone cuts are described in Section&nbsp;6 of 
<xref target="RFC2181"/>).  But zone cuts do not
necessarily exist at every label boundary.  If we take the name
www.foo.bar.example, it is possible that there is a zone cut between
"foo" and "bar" but not between "bar" and "example". So, assuming
that the resolver already knows the name&nbsp;servers of .example, when it
receives the query "What is the AAAA record of www.foo.bar.example?",
it does not always know where the zone cut will be.  To find the
zone&nbsp;cut, it will query the .example name&nbsp;servers for the
NS records for bar.example. It will get a NODATA response, indicating
that there is no zone cut at that point, so it has to query the
.example name&nbsp;servers again with one more label, and so on.
(<xref target="zonecutalgo"/> describes this algorithm in deeper detail.)</t>

<t>Since the information about the zone cuts will be stored in the
resolver's cache, the performance cost is probably reasonable. <xref
target="perfs"/> discusses this performance discrepancy further.</t>
<t>Note that DNSSEC-validating resolvers already have access to this
information, since they have to know the zone cut (the DNSKEY record
set is just below; the DS record set is just above).</t>
</section>

<section title="Possible Issues">
<t>QNAME minimisation is legal, since the original DNS RFCs do not
mandate sending the full QNAME. So, in theory, it should work without
any problems. However, in practice, some problems may occur
(see <xref target="Huque-QNAME-Min"/> for an analysis and
<xref target="Huque-QNAME-storify"/> for an interesting discussion on
this topic).</t>

<t>Some broken name&nbsp;servers do not react properly to QTYPE=NS
requests. For instance, some authoritative name&nbsp;servers embedded in
load balancers reply properly to A queries but send REFUSED to NS
queries. This behaviour is a protocol violation, and there is no need
to stop improving the DNS because of such behaviour. However, QNAME
minimisation may still work with such domains, since they are only
leaf domains (no need to send them NS requests). Such a setup breaks
more than just QNAME minimisation. It breaks negative answers, since
the servers don't return the correct SOA, and it also breaks anything
dependent upon NS and SOA records existing at the top of the zone.
</t>

<t>Another way to deal with such incorrect name&nbsp;servers would be to
try with QTYPE=A requests (A being chosen because it is the most common
and hence a QTYPE that will always be accepted, while a QTYPE NS may
ruffle the feathers of some middleboxes). Instead of querying
name&nbsp;servers with a query "NS example.com", we could use
"A&nbsp;_.example.com" and see if we get a referral.</t>

<t>A problem can also appear when a name&nbsp;server does not react
properly to ENTs (Empty Non-Terminals). If ent.example.com has no
resource records but foobar.ent.example.com does, then ent.example.com
is an ENT. Whatever the QTYPE, a query for ent.example.com must
return NODATA (NOERROR / ANSWER: 0). However, some name&nbsp;servers
incorrectly return NXDOMAIN for ENTs. If a resolver queries only
foobar.ent.example.com, everything will be OK, but if it implements
QNAME minimisation, it may query ent.example.com and get an
NXDOMAIN. See also Section&nbsp;3 of <xref target="DNS-Res-Improve"/>
for the other bad consequences of this bad behaviour.</t>

<t>A possible solution, currently implemented in Knot, is to retry
with the full query when you receive an NXDOMAIN. It works, but it is
not ideal for privacy.</t>

<t>Other practices that do not conform to the DNS protocol standards
may pose a problem: there is a common DNS trick used by some web hosters
that also do DNS hosting that exploits the fact that the DNS protocol
(pre-DNSSEC) allows certain serious misconfigurations, such as parent
and child zones disagreeing on the location of a zone cut.  Basically,
they have a single zone with wildcards for each TLD, like:

<figure>
<artwork>
*.example.          60  IN  A   192.0.2.6
</artwork>
</figure>

(They could just wildcard all of "*.", which would be sufficient. We
don't know why they don't do it.)</t>

<t>This lets them have many web-hosting customers without having to
configure thousands of individual zones on their name&nbsp;servers.
They just tell the prospective customer to point their NS records at
the hoster's name&nbsp;servers, and the web hoster doesn't have to
provision anything in order to make the customer's domain resolve.
NS queries to the hoster will therefore not give the right result,
which may endanger QNAME minimisation (it will be a problem for DNSSEC,
too).
</t>
</section>

<section title="Protocol and Compatibility Discussion">
<t>QNAME minimisation is compatible with the current DNS system and
therefore can easily be deployed; since it is a unilateral change to
the resolver, it does not change the protocol. (Because it is a
unilateral change, resolver implementers may do QNAME minimisation in
slightly different ways; see the appendices for examples.)</t>
<t>One should note that the behaviour suggested here (minimising the
amount of data sent in QNAMEs from the resolver) is NOT forbidden by
Section&nbsp;5.3.3 of <xref target="RFC1034"/> or
Section&nbsp;7.2 of <xref target="RFC1035"/>. As stated in
<xref target="intro"/>, the current method, sending the full QNAME,
is not mandated by the DNS protocol.</t>

<t>One may notice that many documents that explain the DNS and that
are intended for a wide audience incorrectly describe the resolution
process as using QNAME minimisation (e.g., by showing a request
going to the root, with just the TLD in the query). As a result, these
documents may confuse  readers that use them for privacy analysis.
</t>
</section>

<section title="Operational Considerations">
<t>TODO what to do if the resolver forwards? Unbound disables QNAME
minimisation in that case, since the forwarder will see everything, anyway.</t>
  <t>The administrators of the forwarders, and of the authoritative
name&nbsp;servers, will get less data, which will reduce the utility of the
statistics they can produce (such as the percentage of the various
QTYPEs) <xref target="Kaliski-Minimum"/>.</t>
<t>DNS administrators are reminded that the data on DNS requests
that they store may have legal consequences, depending on your
jurisdiction (check with your local lawyer).</t>
</section>

<section anchor="perfs" title="Performance Considerations">
<t>The main goal of QNAME minimisation is to improve privacy by
sending less data. However, it may have other advantages. For
instance, if a root name&nbsp;server receives a query from some resolver
for A.example followed by B.example followed by C.example, the result
will be three NXDOMAINs, since .example does not exist in the root
zone. Under query name minimisation, the root name&nbsp;servers would hear
only one question (for .example itself) to which they could answer
NXDOMAIN, thus opening up a negative caching opportunity in which the
full resolver could know a priori that neither B.example nor C.example
could exist. Thus, in this common case the total number of upstream
queries under QNAME minimisation would be counterintuitively less
than the number of queries under the traditional iteration (as
described in the DNS standard).</t>
<t>QNAME minimisation may also improve lookup performance for TLD
operators.  For a typical TLD, delegation-only, and with delegations
just under the TLD, a two&nbhy;label QNAME query is optimal for
finding the delegation owner name.</t>

<t>QNAME minimisation can decrease performance in some cases --
for instance, for a deep domain name (like
www.host.group.department.example.com, where
host.group.department.example.com is hosted on example.com's
name&nbsp;servers). Let's assume a resolver that knows only the
name&nbsp;servers of .example. Without QNAME minimisation, it would
send these .example name&nbsp;servers a query for
www.host.group.department.example.com and immediately get a
specific referral or an answer, without the need for more queries
to probe for the zone cut. For such a name, a cold resolver with
QNAME minimisation will, depending on how QNAME minimisation is
implemented, send more queries, one per label. Once the cache is
warm, there will be no difference with a traditional resolver.
Actual testing is described in <xref target="Huque-QNAME-Min"/>.
Such deep domains are especially common under ip6.arpa.</t>
</section>

<section title="Results of the Experimentation">
<t>TODO various experiences from actual deployments, problems heard.</t>
</section>
  
<section title="Security Considerations">
<t>QNAME minimisation's benefits are clear in the case where you want
to decrease exposure to the authoritative name&nbsp;server. But minimising
the amount of data sent also, in part, addresses the case of a wire
sniffer as well as the case of privacy invasion by the
servers. (Encryption is of course a better defense against wire
sniffers, but, unlike QNAME minimisation, it changes the protocol and
cannot be deployed unilaterally. Also, the effect of QNAME
minimisation on wire sniffers depends on whether the sniffer is on
the DNS path.)</t>
<t>QNAME minimisation offers zero protection against the recursive
resolver, which still sees the full request coming from the stub
resolver.</t>
<t>All the alternatives mentioned in <xref target="alts"/> decrease
privacy in the hope of improving performance. They must not be used
if you want maximum privacy.</t>
</section>

<section anchor="impl" title="Implementation status - RFC EDITOR: REMOVE BEFORE PUBLICATION">

<t>This section records the status of known implementations of the
protocol defined by this specification at the time of posting of this
Internet-Draft, and is based on a proposal described in <xref
target="RFC6982"/>. The description of implementations in this section
is intended to assist the IETF in its decision processes in
progressing drafts to RFCs.  Please note that the listing of any
individual implementation here does not imply endorsement by the IETF.
Furthermore, no effort has been spent to verify the information
presented here that was supplied by IETF contributors.  This is not
intended as, and must not be construed to be, a catalog of available
implementations or their features.  Readers are advised to note that
other implementations may exist.</t>
<t>According to <xref target="RFC6982"/>, "this will allow reviewers
and working groups to assign due consideration to documents that have
the benefit of running code, which may serve as evidence of valuable
experimentation and feedback that have made the implemented protocols
more mature.  It is up to the individual working groups to use this
information as they see fit".</t>
<t>TODO</t>
</section>

</middle>

<back>

<references title='Normative References'>
&rfc1034;
&rfc1035;
&rfc6973;
</references>

<references title='Informative References'>
&rfc2181;
&rfc6982;  
&rfc7626;
&rfc7816;

<!-- draft-wkumari-dnsop-hammer (Expired) -->
<reference anchor='HAMMER'>
<front>
<title>Highly Automated Method for Maintaining Expiring Records</title>
<author initials='W' surname='Kumari' fullname='Warren Kumari'>
    <organization />
</author>
<author initials='R' surname='Arends' fullname='Roy Arends'>
    <organization />
</author>
<author initials='S' surname='Woolf' fullname='Suzanne Woolf'>
    <organization />
</author>
<author initials='D' surname='Migault' fullname='Daniel Migault'>
    <organization />
</author>
<date month='July' year='2014' />
</front>
<seriesInfo name='Work in Progress,' value='draft-wkumari-dnsop-hammer-01' />
</reference>

<!-- draft-vixie-dnsext-resimprove (Expired) -->
<reference anchor='DNS-Res-Improve'>
<front>
<title>Improvements to DNS Resolvers for Resiliency, Robustness, and Responsiveness</title>
<author initials='P' surname='Vixie' fullname='Paul Vixie'>
    <organization />
</author>
<author initials='R' surname='Joffe' fullname='Rodney Joffe'>
    <organization />
</author>
<author initials='F' surname='Neves' fullname='Frederico Neves'>
    <organization />
</author>
<date month='June' year='2010' />
</front>
<seriesInfo name='Work in Progress,' value='draft-vixie-dnsext-resimprove-00'/>
</reference>

<reference anchor="Kaliski-Minimum" target="http://blogs.verisigninc.com/blog/entry/minimum_disclosure_what_information_does">
<front>
<title>Minimum Disclosure: What Information Does a Name Server Need to Do Its Job?</title>
<author fullname="Burt Kaliski" initials="B." surname="Kaliski"/>
<date month="March" year="2015"/>
</front>
</reference>

<reference anchor="Huque-QNAME-Min" target="https://indico.dns-oarc.net/event/21/contribution/9">
<front>
<title>Query name minimization and authoritative server behavior</title>
<author fullname="Shumon Huque" initials="S." surname="Huque"/>
<date month="May" year="2015"/>
</front>
</reference>

<reference anchor="Huque-QNAME-storify" target="https://storify.com/shuque/qname-minimization-dns-oarc">
<front>
<title>Qname Minimization @ DNS-OARC</title>
<author fullname="Shumon Huque" initials="S." surname="Huque"/>
<date month="May" year="2015"/>
</front>
</reference>

</references>

<section anchor="zonecutalgo" title="An Algorithm to Perform QNAME Minimisation">

<t>This algorithm performs name resolution with QNAME minimisation in
the presence of zone cuts that are not yet known.</t>

<t>Although a validating resolver already has the logic to find the
zone&nbsp;cuts, implementers of other resolvers may want to use
this algorithm to locate the cuts. This is just a possible aid for
implementers; it is not intended to be normative:
<list style="hanging" hangIndent="4">
<t hangText="(0)">If the query can be answered from the cache, do so;
otherwise, iterate as follows:</t>
<t hangText="(1)">Find the closest enclosing NS RRset in your cache.
The owner of this NS RRset will be a suffix of the QNAME -- the
longest suffix of any NS RRset in the cache. Call this ANCESTOR.</t>
<t hangText="(2)">Initialise CHILD to the same as ANCESTOR.</t>
<t hangText="(3)">If CHILD is the same as the QNAME, resolve the
original query using ANCESTOR's name&nbsp;servers, and finish.</t>
<t hangText="(4)">Otherwise, add a label from the QNAME to the start
of CHILD.</t>
<t hangText="(5)">If you have a negative cache entry for the NS RRset
at CHILD, go back to step 3.</t>
<t hangText="(6)">Query for CHILD IN NS using ANCESTOR's name&nbsp;servers.
The response can be:
<list style="hanging" hangIndent="5">
<t hangText="(6a)">A referral. Cache the NS RRset from the authority
section, and go back to step 1.</t>
<t hangText="(6b)">An authoritative answer. Cache the NS RRset from
the answer&nbsp;section, and go back to step 1.</t>
<t hangText="(6c)">An NXDOMAIN answer. Return an NXDOMAIN answer in
response to the original query, and stop.</t>
<t hangText="(6d)">A NOERROR/NODATA answer. Cache this negative answer,
and go&nbsp;back to step 3.</t>
</list></t>
</list>
</t></section>

<section anchor="alts" title="Alternatives">
<t>Remember that QNAME minimisation is unilateral, so a resolver is
not forced to implement it exactly as described here.</t>
<t>There are several ways to perform QNAME minimisation. See
<xref target="qname-main"/> for the suggested way. It can be called the
aggressive algorithm, since the resolver only sends NS queries as long
as it does not know the zone cuts. This is the safest, from a privacy
point of view. Another possible algorithm, not fully studied at this
time, could be to "piggyback" on the traditional resolution code. At
startup, it sends traditional full QNAMEs and learns the zone cuts
from the referrals received, then switches to NS queries asking only
for the minimum domain name. This leaks more data but could require
fewer changes in the existing resolver codebase.</t>
<t>In the above specification, the original QTYPE is replaced by NS
(or may be A, if too many servers react incorrectly to NS requests);
this is the best approach to preserve privacy. But this erases
information about the relative use of the various QTYPEs, which may be
interesting for researchers (for instance, if they try to follow IPv6
deployment by counting the percentage of AAAA vs. A queries). A
variant of QNAME minimisation would be to keep the original QTYPE.</t>
<t>Another useful optimisation may be, in the spirit of the HAMMER
idea <xref target="HAMMER"/>, to probe in advance for the introduction
of zone cuts where none previously existed (i.e., confirm their
continued absence, or discover them).</t>
<t>To address the "number of queries" issue described in <xref
target="perfs"/>, a possible solution is to always use the traditional
algorithm when the cache is cold and then to move to QNAME
minimisation (precisely defining what is "hot" or "cold" is left to
the implementer). This will decrease the privacy but will guarantee no
degradation of performance.</t>
</section>

<section title="Acknowledgments" numbered="no">
<t>TODO (refer to 7816)</t>
</section>

<section title="Changes from RFC 7816" numbered="no">
  <t>TODO</t>
</section>

</back>

</rfc>
